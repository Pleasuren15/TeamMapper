parameters:
  dockerComposeFile: 'docker-compose.yml'
  dependsOn: ''
  testProjects: ''
  buildConfiguration: 'Release'

jobs:
- job: DockerComposeRun
  displayName: 'Run Integration Tests Docker'
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: 'ubuntu-latest'

  steps:
    - task: UseDotNet@2
      displayName: 'Install .Net 9.0'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: Powershell@2
      displayName: 'Docker Compose Up'
      inputs:
        targetType: 'inline'
        script: |
          docker compose -f ${{ parameters.dockerComposeFile }} up -d

    - task: DotNetCoreCLI@2
      displayName: 'Run Build'
      inputs:
        command: 'build'
        projects: '${{ parameters.testProjects }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Project'
      inputs:
        command: 'restore'
        projects: '${{ parameters.testProjects }}'
    
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '${{ parameters.testProjects }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --logger trx'
        publishTestResults: true

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/TestResults/*.trx'

    - script: docker ps -a
      displayName: 'Verify Running Containers'

    - script: |
        echo "Stopping services..."
        docker compose -f ${{ parameters.dockerComposeFile }} down
      displayName: 'Compose Down'
      condition: always()