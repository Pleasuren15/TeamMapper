parameters:
  solution: ''
  buildConfiguration: 'Release'
  artifactName: 'drop'
  testProjects: ''
  sonarProjectKey: ''
  sonarOrganization: ''
  sonarServiceConnection: 'SonarCloudConnection'

jobs:
- job: Build
  displayName: 'Build, Test & Analyze'
  pool:
    vmImage: 'windows-latest'

  steps:
    - task: UseDotNet@2
      displayName: 'Install .Net 9.0'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarCloud: ${{ parameters.sonarServiceConnection }}
        organization: ${{ parameters.sonarOrganization }}
        scannerMode: 'dotnet'
        projectKey: ${{ parameters.sonarProjectKey }}
        projectName: ${{ parameters.sonarProjectKey }}

    - task: DotNetCoreCLI@2
      displayName: 'Restore Project'
      inputs:
        command: 'restore'
        projects: '${{ parameters.solution }}'

    - task: DotNetCoreCLI@2
      displayName: 'Run Build'
      inputs:
        command: 'build'
        projects: '${{ parameters.solution }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'

    - task: PowerShell@2
      displayName: 'Run Unit Tests tests'
      inputs:
        targetType: 'inline'
        failOnStderr: false
        script: |
          # Create local tool manifest if it doesn't exist
          dotnet new tool-manifest

          # Install dotCover as a local tool
          dotnet tool install JetBrains.dotCover.CommandLineTools

          # Run tests with coverage
          dotnet dotcover cover-dotnet `
            --Output="$(Common.TestResultsDirectory)/coverage.xml" `
            --ReportType=DetailedXml `
            --AttributeFilters="System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" `
            --Filters="-:module=xunit*;-:module=*Tests;-:module=Dapper;-:module=testhost*" `
            -- test "${{ parameters.testProjects }}" `
            --configuration Release `
            --results-directory "$(Common.TestResultsDirectory)" `
            --logger trx

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Common.TestResultsDirectory)'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Unit Tests Test Results'

    - task: reportgenerator@5
      displayName: 'Create Unit Tests Coverage Report'
      inputs:
        reports: '$(Common.TestResultsDirectory)/*coverage.xml'
        targetdir: '$(Common.TestResultsDirectory)'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;SonarQube'
        tag: '$(Build.BuildNumber)'
        assemblyfilters: '-nunit.framework.dll;-nunit3.testadapter.dll;-fluentassertions.dll;-mgs.systemservices.core.dll;'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Common.TestResultsDirectory)/Cobertura.xml'
        
    - task: SonarCloudAnalyze@3
      inputs:
        jdkversion: 'JAVA_HOME_11_X64'
      displayName: 'SonarCloud Analyze'

    # - task: SonarCloudPublish@5
    #   inputs:
    #     pollingTimeoutSec: '300'
    #   displayName: 'SonarCloud Publish'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifact'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{ parameters.solution }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
