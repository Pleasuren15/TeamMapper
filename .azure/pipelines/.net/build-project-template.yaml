parameters:
  solution: ''
  buildConfiguration: 'Release'
  artifactName: 'drop'
  testProjects: ''
  sonarProjectKey: ''
  sonarOrganization: ''
  sonarServiceConnection: 'SonarCloudConnection'

jobs:
- job: Build
  displayName: 'Build, Test & Analyze'
  pool:
    vmImage: 'windows-latest'

  steps:
    - task: UseDotNet@2
      displayName: 'Install .Net 9.0'
      inputs:
        packageType: 'sdk'
        version: '9.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarCloud: ${{ parameters.sonarServiceConnection }}
        organization: ${{ parameters.sonarOrganization }}
        scannerMode: 'dotnet'
        projectKey: ${{ parameters.sonarProjectKey }}
        projectName: ${{ parameters.sonarProjectKey }}

    - task: DotNetCoreCLI@2
      displayName: 'Restore Project'
      inputs:
        command: 'restore'
        projects: '${{ parameters.solution }}'

    - task: DotNetCoreCLI@2
      displayName: 'Run Build'
      inputs:
        command: 'build'
        projects: '${{ parameters.solution }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }}'

    - task: DotNetCoreCLI@2
      displayName: 'Install ReportGenerator'
      inputs:
        command: custom
        custom: tool
        arguments: 'install --global dotnet-reportgenerator-globaltool'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit Tests'
      inputs:
        command: 'test'
        projects: '${{ parameters.testProjects }}'
        publishTestResults: true
        arguments: '--configuration ${{ parameters.buildConfiguration }} /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - script: |
        reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
      displayName: 'Create code coverage report'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Test Results' 
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
        
    - task: SonarCloudAnalyze@3
      inputs:
        jdkversion: 'JAVA_HOME_11_X64'
      displayName: 'SonarCloud Analyze'

    # - task: SonarCloudPublish@5
    #   inputs:
    #     pollingTimeoutSec: '300'
    #   displayName: 'SonarCloud Publish'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifact'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '${{ parameters.solution }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '${{ parameters.artifactName }}'
    
    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/TestResults/*.trx'
