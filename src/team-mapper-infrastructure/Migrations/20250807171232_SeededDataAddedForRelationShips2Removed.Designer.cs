// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using team_mapper_infrastructure.Infrastructure;

#nullable disable

namespace team_mapper_infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807171232_SeededDataAddedForRelationShips2Removed")]
    partial class SeededDataAddedForRelationShips2Removed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("team_mapper_domain.Models.ExpiringWorkItem", b =>
                {
                    b.Property<Guid>("ExpiringWorkItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "ExpiringWorkItemId");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "EndDate");

                    b.Property<bool>("IsNotificationSent")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "IsNotificationSent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Title");

                    b.Property<Guid>("WorkItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "WorkItemId");

                    b.HasKey("ExpiringWorkItemId");

                    b.HasIndex("WorkItemId");

                    b.ToTable("ExpiringWorkItems");
                });

            modelBuilder.Entity("team_mapper_domain.Models.TeamMember", b =>
                {
                    b.Property<Guid>("TeamMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "TeamMemberId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Name");

                    b.HasKey("TeamMemberId");

                    b.ToTable("TeamMembers");

                    b.HasAnnotation("Relational:JsonPropertyName", "TeamMember");
                });

            modelBuilder.Entity("team_mapper_domain.Models.WorkItem", b =>
                {
                    b.Property<Guid>("WorkItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "WorkItemId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "EndDate");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "IsComplete");

                    b.Property<int>("TaskCategory")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "TaskCategory");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "TaskPriority");

                    b.Property<Guid?>("TeamMemberId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "TeamMemberId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Title");

                    b.HasKey("WorkItemId");

                    b.HasIndex("TeamMemberId");

                    b.ToTable("WorkItems");

                    b.HasAnnotation("Relational:JsonPropertyName", "WorkItem");
                });

            modelBuilder.Entity("team_mapper_domain.Models.ExpiringWorkItem", b =>
                {
                    b.HasOne("team_mapper_domain.Models.WorkItem", "WorkItem")
                        .WithMany()
                        .HasForeignKey("WorkItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkItem");
                });

            modelBuilder.Entity("team_mapper_domain.Models.WorkItem", b =>
                {
                    b.HasOne("team_mapper_domain.Models.TeamMember", "TeamMember")
                        .WithMany()
                        .HasForeignKey("TeamMemberId");

                    b.Navigation("TeamMember");
                });
#pragma warning restore 612, 618
        }
    }
}
